$primary_modifier = ALT
$secondary_modifier = MOD5

# bind = $primary_modifier, X, exec, notify-send "bind works!" 

bind = $primary_modifier SHIFT, Q, killactive,

### Opening different applications ###
bind = $primary_modifier, Return, exec, $terminal
bind = $primary_modifier, D, exec, $menu
bind = $primary_modifier, P, exec, $colorPicker | wl-copy

### Hyprland Actions ###
bind = $secondary_modifier, Q, exec, hyprlock
bind = $secondary_modifier, ESCAPE, exec, wlogout
bind = Ctrl, Escape, exec, killall waybar || waybar # toggle waybar

# Screenshots
bind = , Print, exec, grimblast --notify copysave screen # Entire screen + clipboard copy
bind = $secondary_modifier, Print, exec, grimblast --notify copysave active # current Active window only + clipboard copy
bind = $primary_modifier SHIFT, S, exec, grimblast --notify copysave area # Select area to take screenshot

### Custom ###

# Move desktops to monitor - not really working, need some way of addressing monitors by description.
# bind = $secondary_modifier, F1, exec, hyprctl dispatch moveworkspacetomonitor 1 2; hyprctl dispatch moveworkspacetomonitor 2 1; hyprctl dispatch moveworkspacetomonitor 4 1

bind = , Control_R, exec, sh ~/.config/hypr/extra/scripts/toggle-touchpad.sh dll0945:00-06cb:cde6-touchpad # Change input to script for given touchpad (get touchpad with hyprctl devices)
bind = $secondary_modifier SHIFT, d, exec, hyprctl keyword monitor "eDP-1, disable" # Disable laptop monitor
bind = $secondary_modifier SHIFT, e, exec, hyprctl keyword monitor "eDP-1, enable" # Enable laptop monitor

### Mouse ###

# Scroll through existing workspaces with primary_modifier + scroll
bind = $primary_modifier, mouse_down, workspace, e+1
bind = $primary_modifier, mouse_up, workspace, e-1

# Move/resize windows with primary_modifier + LMB/RMB and dragging
bindm = $primary_modifier, mouse:272, movewindow
bindm = $primary_modifier, mouse:273, resizewindow

# Move/resize windows + Mouse
bindm = $primary_modifier, Z, movewindow
bindm = $primary_modifier, X, resizewindow

### Groups (tabs) ###

bind = $secondary_modifier, T, togglegroup
bind = $secondary_modifier, l, changegroupactive, f
bind = $secondary_modifier, h, changegroupactive, b

bind = $secondary_modifier SHIFT, l, movegroupwindow, f
bind = $secondary_modifier SHIFT, h, movegroupwindow, b

bind = $primary_modifier SHIFT, g, lockactivegroup, toggle # when locked, group will not accept new windows

bind = $secondary_modifier SHIFT, h, moveintogroup, l
bind = $secondary_modifier SHIFT, j, moveintogroup, d
bind = $secondary_modifier SHIFT, k, moveintogroup, u
bind = $secondary_modifier SHIFT, l, moveintogroup, r

bind = $secondary_modifier SHIFT, o, moveoutofgroup 

# Switch tab with $secondary_modifier + [0-9]
bind = $secondary_modifier, 1, changegroupactive, 1
bind = $secondary_modifier, 2, changegroupactive, 2
bind = $secondary_modifier, 3, changegroupactive, 3
bind = $secondary_modifier, 4, changegroupactive, 4
bind = $secondary_modifier, 5, changegroupactive, 5
bind = $secondary_modifier, 6, changegroupactive, 6
bind = $secondary_modifier, 7, changegroupactive, 7
bind = $secondary_modifier, 8, changegroupactive, 8
bind = $secondary_modifier, 9, changegroupactive, 9
bind = $secondary_modifier, 0, changegroupactive, 10

### Windows ###

bind = $primary_modifier, F, fullscreen
bind = $primary_modifier, W, togglefloating,

# Move focus with vim-like keybindings.
bind = $primary_modifier, h, movefocus, l
bind = $primary_modifier, l, movefocus, r
bind = $primary_modifier, k, movefocus, u
bind = $primary_modifier, j, movefocus, d

# Move windows with vim-like keybindings.
bind = $primary_modifier SHIFT, h, movewindow, l
bind = $primary_modifier SHIFT, l, movewindow, r
bind = $primary_modifier SHIFT, k, movewindow, u
bind = $primary_modifier SHIFT, j, movewindow, d

# Switch workspaces with primary_modifier + [0-9]
bind = $primary_modifier, 1, workspace, 1
bind = $primary_modifier, 2, workspace, 2
bind = $primary_modifier, 3, workspace, 3
bind = $primary_modifier, 4, workspace, 4
bind = $primary_modifier, 5, workspace, 5
bind = $primary_modifier, 6, workspace, 6
bind = $primary_modifier, 7, workspace, 7
bind = $primary_modifier, 8, workspace, 8
bind = $primary_modifier, 9, workspace, 9
bind = $primary_modifier, 0, workspace, 10

# Move active window to a workspace with primary_modifier + SHIFT + [0-9]
bind = $primary_modifier SHIFT, 1, movetoworkspace, 1
bind = $primary_modifier SHIFT, 2, movetoworkspace, 2
bind = $primary_modifier SHIFT, 3, movetoworkspace, 3
bind = $primary_modifier SHIFT, 4, movetoworkspace, 4
bind = $primary_modifier SHIFT, 5, movetoworkspace, 5
bind = $primary_modifier SHIFT, 6, movetoworkspace, 6
bind = $primary_modifier SHIFT, 7, movetoworkspace, 7
bind = $primary_modifier SHIFT, 8, movetoworkspace, 8
bind = $primary_modifier SHIFT, 9, movetoworkspace, 9
bind = $primary_modifier SHIFT, 0, movetoworkspace, 10

# Resize windows
binde = $primary_modifier+Shift, Right, resizeactive, 50 0
binde = $primary_modifier+Shift, Left, resizeactive, -50 0
binde = $primary_modifier+Shift, Up, resizeactive, 0 -50
binde = $primary_modifier+Shift, Down, resizeactive, 0 50

### Function row custom keys ###

# Volume and Media Control
binde = , XF86AudioRaiseVolume, exec, pamixer -i 5
binde = , XF86AudioLowerVolume, exec, pamixer -d 5
binde = , XF86AudioMicMute, exec, pamixer --default-source -m
binde = , XF86AudioMute, exec, pamixer -t
binde = , XF86AudioPlay, exec, playerctl play-pause
binde = , XF86AudioPause, exec, playerctl play-pause
binde = , XF86AudioNext, exec, playerctl next
binde = , XF86AudioPrev, exec, playerctl previous

# Screen brightness
bind = , XF86MonBrightnessUp, exec, brightnessctl s +5%
bind = , XF86MonBrightnessDown, exec, brightnessctl s 5%-

###############################################################
# Bind flags:
# l -> locked, will also work when an input inhibitor (e.g. a lockscreen) is active.
# r -> release, will trigger on release of a key.
# o -> longPress, will trigger on long press of a key.
# e -> repeat, will repeat when held.
# n -> non-consuming, key/mouse events will be passed to the active window in addition to triggering the dispatcher.
# m -> mouse, see below.
# t -> transparent, cannot be shadowed by other binds.
# i -> ignore mods, will ignore modifiers.
# s -> separate, will arbitrarily combine keys between each mod/key, see [Keysym combos](#keysym-combos) above.
# d -> has description, will allow you to write a description for your bind.
# p -> bypasses the app's requests to inhibit keybinds.
